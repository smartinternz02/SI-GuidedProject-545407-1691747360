# Importing the rquired libraries
import numpy as np
import pandas as pd
import missingno as msno
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error, r2_score, explained_variance_score

# Reading the given dataset
manga = pd.read_csv("best.csv")

# Displaying the first five instances of the dataset
manga.head()

# Checking for missing values
manga.isnull().sum()

# Visualizing the number of missing values
msno.matrix(manga)

# Count the occurrences of different demographics in the manga DataFrame
demographic_counts = manga['Demographic'].value_counts()
print(demographic_counts)

#Count the number of manga series in each demographics
demographic_counts.plot(kind='bar')
plt.xlabel('Demographic')
plt.ylabel('Count')
plt.title('Distribution of Manga Series by Demographic')
plt.show()

#Ranking authors based on sales
# Calculating volumes to sales ratio
manga['Volume_to_Sales_Ratio'] = manga['Approximate sales in million(s)'] / manga['No. of collected volumes']

# Displaying the volume to sales ratio
manga[['Manga series', 'Volume_to_Sales_Ratio']]

# Sorting the authors based on the ratio in descending order
top_authors = manga.groupby('Author(s)')['Approximate sales in million(s)'].sum().sort_values(ascending=False)

# Displaying the top authors
top_authors

#Visualizing the sales of the different manga series
plt.hist(manga['Approximate sales in million(s)'], bins=10)
plt.xlabel('Sales (in million)')
plt.ylabel('Frequency')
plt.title('Sales Distribution of Manga Series')
plt.show()

#Analizing the longevity of different manga series
manga['Years_Serialized'] = manga['Serialized'].str.extract(r'(\d{4})').astype(int)
average_lifespan = manga['Years_Serialized'].mean() # average lifespan of a series
oldest_series = manga.loc[manga['Years_Serialized'].idxmin(), 'Manga series'] # finding the oldest series
newest_series = manga.loc[manga['Years_Serialized'].idxmax(), 'Manga series'] # finding the newest series

# Displaying the averag life-span of a manga series
print("The average life-span of a manga series : ",average_lifespan)

# Displaying the oldest manga series
print("The oldest series in the dataset : ",oldest_series)

# Displaying the newest manga series
print("The newest series in the dataset : ",newest_series)

#Analyzing the publisher performance
# Sorting the publishers based on the sales in descending order
publisher_sales = manga.groupby('Publisher')['Approximate sales in million(s)'].sum().sort_values(ascending=False)

# Displaying the top publishers
publisher_sales

#Time series analysis
manga['Year'] = manga['Serialized'].str.extract(r'(\d{4})').astype(int)
sales_by_year = manga.groupby('Year')['Approximate sales in million(s)'].sum()
sales_by_year.plot()
plt.xlabel('Year')
plt.ylabel('Sales (in million)')
plt.title('Manga Sales over Time')
plt.show()

#Market Share by Publishers
total_sales = manga['Approximate sales in million(s)'].sum()
market_share = manga.groupby('Publisher')['Approximate sales in million(s)'].sum() / total_sales * 100

# Displaying the market share of each publisher
market_share

#Revenue Analysis
# Calculate revenue generated by each manga series and calculate total revenue
manga['Revenue'] = manga['Approximate sales in million(s)'] * manga['Average sales per volume in million(s)']
total_revenue = manga['Revenue'].sum()

# Displyaing the total revenue
print(" The total revenue of the manga series : ", total_revenue)

#Visualizing Market Share
# Calculating the revenue of the dataset
manga['Revenue'] = manga['Approximate sales in million(s)'] * manga['Average sales per volume in million(s)']

# Calculate the market share based on revenue
market_share = manga['Revenue'] / manga['Revenue'].sum()

# Plotting the market share as a pie chart
plt.pie(market_share, labels=manga['Manga series'], autopct='%1.1f%%')
plt.title('Market Share based on Revenue')
plt.axis('equal')
plt.show()

#Visualization of demographic data
# Visualization: Pie chart of Demographic Distribution
demographic_counts = manga['Demographic'].value_counts()
plt.pie(demographic_counts, labels=demographic_counts.index, autopct='%1.1f%%')
plt.title('Demographic Distribution of Manga Series')
plt.axis('equal')
plt.show()

#Visualization of genre popularity
# Calculate total sales by genre
genre_sales = manga.groupby('Demographic')['Approximate sales in million(s)'].sum()

# Plot genre popularity based on total sales
plt.bar(genre_sales.index, genre_sales)
plt.xlabel('Demographic')
plt.ylabel('Total Sales (in million)')
plt.title('Genre Popularity based on Total Sales')
plt.show()

#Finding the relationship between the year and the number of sales
# Calculate the years of serialization for each manga series
manga['Years_Serialized'] = manga['Serialized'].str.extract(r'(\d{4})').astype(int)

# Plot the relationship between years of serialization and sales
plt.scatter(manga['Years_Serialized'], manga['Approximate sales in million(s)'])
plt.xlabel('Years of Serialization')
plt.ylabel('Approximate Sales (in million)')
plt.title('Longevity and Success of Manga Series')
plt.show()

#Visualizing the distribution of volumes across manga series
# Plot the distribution of collected volumes
plt.hist(manga['No. of collected volumes'], bins=10)
plt.xlabel('Number of Collected Volumes')
plt.ylabel('Frequency')
plt.title('Distribution of Collected Volumes')
plt.show()

#Visualizing the total sales for each publisher
# Calculate the total sales for each publisher
publisher_sales = manga.groupby('Publisher')['Approximate sales in million(s)'].sum()

# Plot the total sales for each publisher
plt.bar(publisher_sales.index, publisher_sales)
plt.xlabel('Publisher')
plt.ylabel('Total Sales (in million)')
plt.title('Publisher Analysis: Total Sales')
plt.xticks(rotation=90)
plt.show()

#Model Building
# Prepare the features and target variable
X = manga[['No. of collected volumes', 'Average sales per volume in million(s)']] # features used for analysis
y = manga['Approximate sales in million(s)'] # feature to predict

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate the evaluation metrics
mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
explained_variance = explained_variance_score(y_test, y_pred)

# Print the evaluation metrics
print("Mean Squared Error: ",mse)
print("Mean Absolute Error: ", mae)
print("R-squared: ", r2)
print("Explained Variance Score: ", explained_variance)
print("Mean Absolute Error: ", mae)
print("R-squared: ", r2)
print("Explained Variance Score: ", explained_variance)
